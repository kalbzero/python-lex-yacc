
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN BREAK CASE CHAR COLON COMMA DECIMAL DEFAULT DIFF DIVIDE DIVIDEEQUALS ELSE EQUALS EXPLAMATION FLOAT FOR ID IF INT LBRACE LPAREN MAIOR MAIOREQUALS MENOR MENOREQUALS MINUS MINUSEQUALS NUMBER OR PLUS RBRACE RPAREN SEMICOLON STRING SUMEQUALS SWITCH TIMES TIMESEQUALS WHILEprogram : sequence_declarationsequence_declaration : declaration sequence_declaration \n                            | declarationdeclaration  : type variavel define_end_of_instruction\n                    | op_math\n                    | statement_if\n                    | statement_switch\n                    | statement_for\n                    | statement_while statement_if : IF LPAREN expression RPAREN LBRACE declaration RBRACE\n                    | IF LPAREN expression RPAREN LBRACE declaration RBRACE ELSE LBRACE declaration RBRACEstatement_switch : SWITCH LPAREN ID RPAREN LBRACE define_cases define_default RBRACEdefine_cases : CASE value COLON LBRACE declaration define_break RBRACE\n                    | CASE value COLON LBRACE declaration define_break RBRACE define_casesdefine_default : DEFAULT COLON LBRACE declaration define_break RBRACEstatement_while : WHILE LPAREN expression RPAREN LBRACE declaration RBRACEstatement_for  :  FOR LPAREN condition_for SEMICOLON expression SEMICOLON alter_value RPAREN LBRACE declaration RBRACEcondition_for : INT ID ASSIGN NUMBER define_end_of_instruction expression define_end_of_instruction alter_value define_end_of_instruction alter_value : ID PLUS PLUS \n                    | PLUS PLUS ID \n                    | ID MINUS MINUS \n                    | MINUS MINUS ID op_math : ID ASSIGN ID PLUS ID define_end_of_instruction op_math\n                | ID ASSIGN ID MINUS ID define_end_of_instruction op_math\n                | ID ASSIGN ID TIMES ID define_end_of_instruction op_math\n                | ID ASSIGN ID DIVIDE ID define_end_of_instruction op_math\n                | ID ASSIGN ID PLUS ID define_end_of_instruction\n                | ID ASSIGN ID MINUS ID define_end_of_instruction\n                | ID ASSIGN ID TIMES ID define_end_of_instruction\n                | ID ASSIGN ID DIVIDE ID define_end_of_instructionexpression : condition MAIOR condition\n                  | condition MENOR condition\n                  | condition MAIOREQUALS condition\n                  | condition MENOREQUALS condition\n                  | condition EQUALS condition\n                  | condition DIFF condition\n                  | condition AND condition\n                  | condition OR conditiontype : INT\n            | FLOAT\n            | CHARvalue : NUMBER\n             | DECIMAL\n             | STRINGcondition : ID\n                 | valuevariavel : ID\n                | ID COMMA variavel\n                | ID ASSIGN value\n                | ID ASSIGN value COMMA variavel define_end_of_instruction : SEMICOLONdefine_break : BREAK define_end_of_instruction'
    
_lr_action_items = {'INT':([0,3,5,6,7,8,9,24,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[10,10,-5,-6,-7,-8,-9,40,-4,-51,10,10,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,10,10,10,10,-11,-17,]),'FLOAT':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[11,11,-5,-6,-7,-8,-9,-4,-51,11,11,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,11,11,11,11,-11,-17,]),'CHAR':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[12,12,-5,-6,-7,-8,-9,-4,-51,12,12,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,12,12,12,12,-11,-17,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,21,22,23,25,26,27,28,40,44,45,46,47,49,50,51,52,53,54,55,56,58,61,66,78,80,81,82,83,87,90,91,92,93,94,102,103,105,111,112,114,115,116,117,122,128,132,],[13,13,20,-5,-6,-7,-8,-9,-39,-40,-41,30,33,38,33,-4,-51,20,59,62,63,64,65,33,33,33,33,33,33,33,33,33,20,13,13,13,13,13,13,99,-23,-24,-25,-26,-10,33,-16,-12,120,121,13,13,13,13,99,-11,-17,]),'IF':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[14,14,-5,-6,-7,-8,-9,-4,-51,14,14,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,14,14,14,14,-11,-17,]),'SWITCH':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[15,15,-5,-6,-7,-8,-9,-4,-51,15,15,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,15,15,15,15,-11,-17,]),'FOR':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[16,16,-5,-6,-7,-8,-9,-4,-51,16,16,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,16,16,16,16,-11,-17,]),'WHILE':([0,3,5,6,7,8,9,26,27,66,78,80,81,82,83,90,91,92,93,94,103,105,114,115,116,117,128,132,],[17,17,-5,-6,-7,-8,-9,-4,-51,17,17,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,17,17,17,17,-11,-17,]),'$end':([1,2,3,5,6,7,8,9,18,26,27,80,81,82,83,90,91,92,93,94,103,105,128,132,],[0,-1,-3,-5,-6,-7,-8,-9,-2,-4,-51,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,-11,-17,]),'RBRACE':([5,6,7,8,9,26,27,80,81,82,83,84,89,90,91,92,93,94,95,103,105,123,126,128,129,131,132,134,135,],[-5,-6,-7,-8,-9,-4,-51,-27,-28,-29,-30,94,103,-23,-24,-25,-26,-10,105,-16,-12,128,132,-11,134,136,-17,-15,-52,]),'BREAK':([5,6,7,8,9,26,27,80,81,82,83,90,91,92,93,94,103,105,124,125,128,132,],[-5,-6,-7,-8,-9,-4,-51,-27,-28,-29,-30,-23,-24,-25,-26,-10,-16,-12,130,130,-11,-17,]),'ASSIGN':([13,20,59,],[21,29,77,]),'LPAREN':([14,15,16,17,],[22,23,24,25,]),'SEMICOLON':([19,20,27,33,34,35,36,37,39,42,43,62,63,64,65,67,68,69,70,71,72,73,74,76,79,88,113,118,119,120,121,127,130,133,],[27,-47,-51,-45,-46,-42,-43,-44,58,-48,-49,27,27,27,27,-31,-32,-33,-34,-35,-36,-37,-38,87,-50,27,27,-19,-21,-20,-22,27,27,-18,]),'COMMA':([20,35,36,37,43,],[28,-42,-43,-44,61,]),'NUMBER':([22,25,27,29,49,50,51,52,53,54,55,56,58,77,86,102,],[35,35,-51,35,35,35,35,35,35,35,35,35,35,88,35,35,]),'DECIMAL':([22,25,27,29,49,50,51,52,53,54,55,56,58,86,102,],[36,36,-51,36,36,36,36,36,36,36,36,36,36,36,36,]),'STRING':([22,25,27,29,49,50,51,52,53,54,55,56,58,86,102,],[37,37,-51,37,37,37,37,37,37,37,37,37,37,37,37,]),'PLUS':([27,30,87,99,100,109,122,],[-51,44,100,109,111,118,100,]),'MINUS':([27,30,87,99,101,110,122,],[-51,45,101,110,112,119,101,]),'TIMES':([30,],[46,]),'DIVIDE':([30,],[47,]),'RPAREN':([31,33,34,35,36,37,38,41,67,68,69,70,71,72,73,74,98,118,119,120,121,],[48,-45,-46,-42,-43,-44,57,60,-31,-32,-33,-34,-35,-36,-37,-38,108,-19,-21,-20,-22,]),'MAIOR':([32,33,34,35,36,37,],[49,-45,-46,-42,-43,-44,]),'MENOR':([32,33,34,35,36,37,],[50,-45,-46,-42,-43,-44,]),'MAIOREQUALS':([32,33,34,35,36,37,],[51,-45,-46,-42,-43,-44,]),'MENOREQUALS':([32,33,34,35,36,37,],[52,-45,-46,-42,-43,-44,]),'EQUALS':([32,33,34,35,36,37,],[53,-45,-46,-42,-43,-44,]),'DIFF':([32,33,34,35,36,37,],[54,-45,-46,-42,-43,-44,]),'AND':([32,33,34,35,36,37,],[55,-45,-46,-42,-43,-44,]),'OR':([32,33,34,35,36,37,],[56,-45,-46,-42,-43,-44,]),'COLON':([35,36,37,96,97,],[-42,-43,-44,106,107,]),'LBRACE':([48,57,60,104,106,107,108,],[66,75,78,114,115,116,117,]),'CASE':([75,136,],[86,86,]),'DEFAULT':([85,136,137,],[96,-13,-14,]),'ELSE':([94,],[104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sequence_declaration':([0,3,],[2,18,]),'declaration':([0,3,66,78,114,115,116,117,],[3,3,84,89,123,124,125,126,]),'type':([0,3,66,78,114,115,116,117,],[4,4,4,4,4,4,4,4,]),'op_math':([0,3,66,78,80,81,82,83,114,115,116,117,],[5,5,5,5,90,91,92,93,5,5,5,5,]),'statement_if':([0,3,66,78,114,115,116,117,],[6,6,6,6,6,6,6,6,]),'statement_switch':([0,3,66,78,114,115,116,117,],[7,7,7,7,7,7,7,7,]),'statement_for':([0,3,66,78,114,115,116,117,],[8,8,8,8,8,8,8,8,]),'statement_while':([0,3,66,78,114,115,116,117,],[9,9,9,9,9,9,9,9,]),'variavel':([4,28,61,],[19,42,79,]),'define_end_of_instruction':([19,62,63,64,65,88,113,127,130,],[26,80,81,82,83,102,122,133,135,]),'expression':([22,25,58,102,],[31,41,76,113,]),'condition':([22,25,49,50,51,52,53,54,55,56,58,102,],[32,32,67,68,69,70,71,72,73,74,32,32,]),'value':([22,25,29,49,50,51,52,53,54,55,56,58,86,102,],[34,34,43,34,34,34,34,34,34,34,34,34,97,34,]),'condition_for':([24,],[39,]),'define_cases':([75,136,],[85,137,]),'define_default':([85,],[95,]),'alter_value':([87,122,],[98,127,]),'define_break':([124,125,],[129,131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sequence_declaration','program',1,'p_program','etapa3_yacc.py',19),
  ('sequence_declaration -> declaration sequence_declaration','sequence_declaration',2,'p_sequence_declaration','etapa3_yacc.py',23),
  ('sequence_declaration -> declaration','sequence_declaration',1,'p_sequence_declaration','etapa3_yacc.py',24),
  ('declaration -> type variavel define_end_of_instruction','declaration',3,'p_declaration','etapa3_yacc.py',28),
  ('declaration -> op_math','declaration',1,'p_declaration','etapa3_yacc.py',29),
  ('declaration -> statement_if','declaration',1,'p_declaration','etapa3_yacc.py',30),
  ('declaration -> statement_switch','declaration',1,'p_declaration','etapa3_yacc.py',31),
  ('declaration -> statement_for','declaration',1,'p_declaration','etapa3_yacc.py',32),
  ('declaration -> statement_while','declaration',1,'p_declaration','etapa3_yacc.py',33),
  ('statement_if -> IF LPAREN expression RPAREN LBRACE declaration RBRACE','statement_if',7,'p_statement_if','etapa3_yacc.py',37),
  ('statement_if -> IF LPAREN expression RPAREN LBRACE declaration RBRACE ELSE LBRACE declaration RBRACE','statement_if',11,'p_statement_if','etapa3_yacc.py',38),
  ('statement_switch -> SWITCH LPAREN ID RPAREN LBRACE define_cases define_default RBRACE','statement_switch',8,'p_statement_switch','etapa3_yacc.py',46),
  ('define_cases -> CASE value COLON LBRACE declaration define_break RBRACE','define_cases',7,'p_define_cases','etapa3_yacc.py',50),
  ('define_cases -> CASE value COLON LBRACE declaration define_break RBRACE define_cases','define_cases',8,'p_define_cases','etapa3_yacc.py',51),
  ('define_default -> DEFAULT COLON LBRACE declaration define_break RBRACE','define_default',6,'p_define_default','etapa3_yacc.py',55),
  ('statement_while -> WHILE LPAREN expression RPAREN LBRACE declaration RBRACE','statement_while',7,'p_statement_while','etapa3_yacc.py',59),
  ('statement_for -> FOR LPAREN condition_for SEMICOLON expression SEMICOLON alter_value RPAREN LBRACE declaration RBRACE','statement_for',11,'p_statement_for','etapa3_yacc.py',63),
  ('condition_for -> INT ID ASSIGN NUMBER define_end_of_instruction expression define_end_of_instruction alter_value define_end_of_instruction','condition_for',9,'p_condition_for','etapa3_yacc.py',67),
  ('alter_value -> ID PLUS PLUS','alter_value',3,'p_alter_value','etapa3_yacc.py',71),
  ('alter_value -> PLUS PLUS ID','alter_value',3,'p_alter_value','etapa3_yacc.py',72),
  ('alter_value -> ID MINUS MINUS','alter_value',3,'p_alter_value','etapa3_yacc.py',73),
  ('alter_value -> MINUS MINUS ID','alter_value',3,'p_alter_value','etapa3_yacc.py',74),
  ('op_math -> ID ASSIGN ID PLUS ID define_end_of_instruction op_math','op_math',7,'p_op_math','etapa3_yacc.py',77),
  ('op_math -> ID ASSIGN ID MINUS ID define_end_of_instruction op_math','op_math',7,'p_op_math','etapa3_yacc.py',78),
  ('op_math -> ID ASSIGN ID TIMES ID define_end_of_instruction op_math','op_math',7,'p_op_math','etapa3_yacc.py',79),
  ('op_math -> ID ASSIGN ID DIVIDE ID define_end_of_instruction op_math','op_math',7,'p_op_math','etapa3_yacc.py',80),
  ('op_math -> ID ASSIGN ID PLUS ID define_end_of_instruction','op_math',6,'p_op_math','etapa3_yacc.py',81),
  ('op_math -> ID ASSIGN ID MINUS ID define_end_of_instruction','op_math',6,'p_op_math','etapa3_yacc.py',82),
  ('op_math -> ID ASSIGN ID TIMES ID define_end_of_instruction','op_math',6,'p_op_math','etapa3_yacc.py',83),
  ('op_math -> ID ASSIGN ID DIVIDE ID define_end_of_instruction','op_math',6,'p_op_math','etapa3_yacc.py',84),
  ('expression -> condition MAIOR condition','expression',3,'p_expression','etapa3_yacc.py',92),
  ('expression -> condition MENOR condition','expression',3,'p_expression','etapa3_yacc.py',93),
  ('expression -> condition MAIOREQUALS condition','expression',3,'p_expression','etapa3_yacc.py',94),
  ('expression -> condition MENOREQUALS condition','expression',3,'p_expression','etapa3_yacc.py',95),
  ('expression -> condition EQUALS condition','expression',3,'p_expression','etapa3_yacc.py',96),
  ('expression -> condition DIFF condition','expression',3,'p_expression','etapa3_yacc.py',97),
  ('expression -> condition AND condition','expression',3,'p_expression','etapa3_yacc.py',98),
  ('expression -> condition OR condition','expression',3,'p_expression','etapa3_yacc.py',99),
  ('type -> INT','type',1,'p_define_type','etapa3_yacc.py',111),
  ('type -> FLOAT','type',1,'p_define_type','etapa3_yacc.py',112),
  ('type -> CHAR','type',1,'p_define_type','etapa3_yacc.py',113),
  ('value -> NUMBER','value',1,'p_define_value','etapa3_yacc.py',117),
  ('value -> DECIMAL','value',1,'p_define_value','etapa3_yacc.py',118),
  ('value -> STRING','value',1,'p_define_value','etapa3_yacc.py',119),
  ('condition -> ID','condition',1,'p_define_condition','etapa3_yacc.py',123),
  ('condition -> value','condition',1,'p_define_condition','etapa3_yacc.py',124),
  ('variavel -> ID','variavel',1,'p_variavel','etapa3_yacc.py',128),
  ('variavel -> ID COMMA variavel','variavel',3,'p_variavel','etapa3_yacc.py',129),
  ('variavel -> ID ASSIGN value','variavel',3,'p_variavel','etapa3_yacc.py',130),
  ('variavel -> ID ASSIGN value COMMA variavel','variavel',5,'p_variavel','etapa3_yacc.py',131),
  ('define_end_of_instruction -> SEMICOLON','define_end_of_instruction',1,'p_define_end_of_instruction','etapa3_yacc.py',135),
  ('define_break -> BREAK define_end_of_instruction','define_break',2,'p_define_break','etapa3_yacc.py',138),
]
