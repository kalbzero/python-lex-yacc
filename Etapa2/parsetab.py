
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN BREAK CASE CHAR COLON COMMA DECIMAL DEFAULT DIFF DIVIDE DIVIDEEQUALS ELSE EQUALS EXPLAMATION FLOAT ID IF INT LBRACE LPAREN MAIOR MAIOREQUALS MENOR MENOREQUALS MINUS MINUSEQUALS NUMBER OR PLUS RBRACE RPAREN SEMICOLON STRING SUMEQUALS SWITCH TIMES TIMESEQUALSprogram : sequence_declarationsequence_declaration : declaration sequence_declaration \n                            | declarationdeclaration  : type variavel define_end_of_instruction\n                    | statement_ifstatement_if : IF LPAREN expression RPAREN LBRACE declaration RBRACE\n                    | IF LPAREN expression RPAREN LBRACE declaration RBRACE ELSE LBRACE declaration RBRACEexpression : condition MAIOR condition\n                  | condition MENOR condition\n                  | condition MAIOREQUALS condition\n                  | condition MENOREQUALS condition\n                  | condition EQUALS condition\n                  | condition DIFF condition\n                  | condition AND condition\n                  | condition OR conditiontype : INT\n            | FLOAT\n            | CHARvalue : NUMBER\n            | DECIMAL\n            | STRINGcondition : type\n                 | valuevariavel : ID\n                | ID COMMA variaveldefine_end_of_instruction : SEMICOLON'
    
_lr_action_items = {'INT':([0,3,5,13,14,15,26,27,28,29,30,31,32,33,34,44,46,48,],[6,6,-5,6,-4,-26,6,6,6,6,6,6,6,6,6,-6,6,-7,]),'FLOAT':([0,3,5,13,14,15,26,27,28,29,30,31,32,33,34,44,46,48,],[7,7,-5,7,-4,-26,7,7,7,7,7,7,7,7,7,-6,7,-7,]),'CHAR':([0,3,5,13,14,15,26,27,28,29,30,31,32,33,34,44,46,48,],[8,8,-5,8,-4,-26,8,8,8,8,8,8,8,8,8,-6,8,-7,]),'IF':([0,3,5,14,15,34,44,46,48,],[9,9,-5,-4,-26,9,-6,9,-7,]),'$end':([1,2,3,5,10,14,15,44,48,],[0,-1,-3,-5,-2,-4,-26,-6,-7,]),'ID':([4,6,7,8,16,],[12,-16,-17,-18,12,]),'RBRACE':([5,14,15,43,44,47,48,],[-5,-4,-26,44,-6,48,-7,]),'MAIOR':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,26,-22,-23,-19,-20,-21,]),'MENOR':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,27,-22,-23,-19,-20,-21,]),'MAIOREQUALS':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,28,-22,-23,-19,-20,-21,]),'MENOREQUALS':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,29,-22,-23,-19,-20,-21,]),'EQUALS':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,30,-22,-23,-19,-20,-21,]),'DIFF':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,31,-22,-23,-19,-20,-21,]),'AND':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,32,-22,-23,-19,-20,-21,]),'OR':([6,7,8,18,19,20,21,22,23,],[-16,-17,-18,33,-22,-23,-19,-20,-21,]),'RPAREN':([6,7,8,17,19,20,21,22,23,35,36,37,38,39,40,41,42,],[-16,-17,-18,25,-22,-23,-19,-20,-21,-8,-9,-10,-11,-12,-13,-14,-15,]),'LPAREN':([9,],[13,]),'SEMICOLON':([11,12,24,],[15,-24,-25,]),'COMMA':([12,],[16,]),'NUMBER':([13,26,27,28,29,30,31,32,33,],[21,21,21,21,21,21,21,21,21,]),'DECIMAL':([13,26,27,28,29,30,31,32,33,],[22,22,22,22,22,22,22,22,22,]),'STRING':([13,26,27,28,29,30,31,32,33,],[23,23,23,23,23,23,23,23,23,]),'LBRACE':([25,45,],[34,46,]),'ELSE':([44,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sequence_declaration':([0,3,],[2,10,]),'declaration':([0,3,34,46,],[3,3,43,47,]),'type':([0,3,13,26,27,28,29,30,31,32,33,34,46,],[4,4,19,19,19,19,19,19,19,19,19,4,4,]),'statement_if':([0,3,34,46,],[5,5,5,5,]),'variavel':([4,16,],[11,24,]),'define_end_of_instruction':([11,],[14,]),'expression':([13,],[17,]),'condition':([13,26,27,28,29,30,31,32,33,],[18,35,36,37,38,39,40,41,42,]),'value':([13,26,27,28,29,30,31,32,33,],[20,20,20,20,20,20,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sequence_declaration','program',1,'p_program','etapa2_yacc.py',19),
  ('sequence_declaration -> declaration sequence_declaration','sequence_declaration',2,'p_sequence_declaration','etapa2_yacc.py',23),
  ('sequence_declaration -> declaration','sequence_declaration',1,'p_sequence_declaration','etapa2_yacc.py',24),
  ('declaration -> type variavel define_end_of_instruction','declaration',3,'p_declaration','etapa2_yacc.py',28),
  ('declaration -> statement_if','declaration',1,'p_declaration','etapa2_yacc.py',29),
  ('statement_if -> IF LPAREN expression RPAREN LBRACE declaration RBRACE','statement_if',7,'p_statement_if','etapa2_yacc.py',33),
  ('statement_if -> IF LPAREN expression RPAREN LBRACE declaration RBRACE ELSE LBRACE declaration RBRACE','statement_if',11,'p_statement_if','etapa2_yacc.py',34),
  ('expression -> condition MAIOR condition','expression',3,'p_expression','etapa2_yacc.py',38),
  ('expression -> condition MENOR condition','expression',3,'p_expression','etapa2_yacc.py',39),
  ('expression -> condition MAIOREQUALS condition','expression',3,'p_expression','etapa2_yacc.py',40),
  ('expression -> condition MENOREQUALS condition','expression',3,'p_expression','etapa2_yacc.py',41),
  ('expression -> condition EQUALS condition','expression',3,'p_expression','etapa2_yacc.py',42),
  ('expression -> condition DIFF condition','expression',3,'p_expression','etapa2_yacc.py',43),
  ('expression -> condition AND condition','expression',3,'p_expression','etapa2_yacc.py',44),
  ('expression -> condition OR condition','expression',3,'p_expression','etapa2_yacc.py',45),
  ('type -> INT','type',1,'p_define_type','etapa2_yacc.py',57),
  ('type -> FLOAT','type',1,'p_define_type','etapa2_yacc.py',58),
  ('type -> CHAR','type',1,'p_define_type','etapa2_yacc.py',59),
  ('value -> NUMBER','value',1,'p_define_value','etapa2_yacc.py',63),
  ('value -> DECIMAL','value',1,'p_define_value','etapa2_yacc.py',64),
  ('value -> STRING','value',1,'p_define_value','etapa2_yacc.py',65),
  ('condition -> type','condition',1,'p_define_condition','etapa2_yacc.py',69),
  ('condition -> value','condition',1,'p_define_condition','etapa2_yacc.py',70),
  ('variavel -> ID','variavel',1,'p_variavel','etapa2_yacc.py',74),
  ('variavel -> ID COMMA variavel','variavel',3,'p_variavel','etapa2_yacc.py',75),
  ('define_end_of_instruction -> SEMICOLON','define_end_of_instruction',1,'p_define_end_of_instruction','etapa2_yacc.py',79),
]
